# Example file borrowed from https://github.com/wikimedia/riemann-jmx
#
# The MIT License
#
# Copyright (c) 2013 David Schoonover <dsc@less.ly> and others.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

riemann :
    host     : 127.0.0.1
    port     : 5555
    interval : 5

jmx :
    host : 127.0.0.1
    # event_host optional attribute to be used in report to riemann server, otherwise host attribute will be used
    event_host : localhost-9999
    port : 9999

queries :
    # If service is set, its value will be used to set Riemann Event service (RES) field. 
    # Otherwise, the RES value will be set to the value of the obj field, which is the full JMX object name. 
    # This might be important in cases when using special characters (comma, collon, space, quotes, etc) in service names 
    # creates issues with querying such metrics. One notable example is Graphite, that uses host.service.attr as a metric path, and 
    # Grafana that has difficulties querrying metrics paths with special characters in the service field.
    #
    # Examples: service set to "kafka.broker.topics.all" 
    #               => Riemann Event{:host "localhost-9999" :service "kafka.broker.topics.alli.BytesIn" ...} 
    #               => Graphite "localhost-9999.kafka.broker.topics.all.BytesIn"
    #
    #           service not set,
    #               => Riemann Event{:host "localhost-9999" :service "kafka:type=kafka.LogFlushStats" ...}
    #               => Graphite "localhost-9999.kafka:type=kafka.LogFlushStats.AvgFlushMs"
-   service     : "kafka.broker.topics.all"
    obj         : "kafka:type=kafka.BrokerAllTopicStat"
    attr        : [ BytesIn, BytesOut, FailedFetchRequest, FailedProduceRequest, MessagesIn ]
    tags        : [ kafka ]

-   obj     : "kafka:type=kafka.LogFlushStats"
    attr    : [ AvgFlushMs, FlushesPerSecond, MaxFlushMs, NumFlushes, TotalFlushMs ]

-   obj     : "kafka:type=kafka.SocketServerStats"
    attr    :
    -   AvgFetchRequestMs
    -   AvgProduceRequestMs
    -   BytesReadPerSecond
    -   BytesWrittenPerSecond
    -   FetchRequestsPerSecond
    -   MaxFetchRequestMs
    -   MaxProduceRequestMs
    -   NumFetchRequests
    -   NumProduceRequests
    -   ProduceRequestsPerSecond
    -   TotalBytesRead
    -   TotalBytesWritten
    -   TotalFetchRequestMs
    -   TotalProduceRequestMs
